<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview on Hugo Whisper Theme</title>
    <link>/docs/</link>
    <description>Recent content in Overview on Hugo Whisper Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Nov 2018 15:14:39 +1000</lastBuildDate>
    
	<atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Productive</title>
      <link>/docs/productive/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/productive/</guid>
      <description>We designed Holonix to enable developer productivity in a FOSS and extensible way based on the assumption that productivity comes from evolving conventions around a set of &amp;ldquo;golden workflows&amp;rdquo;.
These workflows are relevant to most projects in the Holochain ecosystem.
 building &amp;amp; testing zomes building &amp;amp; testing UIs documenting code releasing artifacts  The benefits of leveraging a well tested set of conventional scripts usually outweighs reinventing the wheel here.</description>
    </item>
    
    <item>
      <title>Portable</title>
      <link>/docs/portable/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/portable/</guid>
      <description>Holonix works on all major operating systems (mostly) without VMs.
This is possible thanks to the awesome work by the NixOS Foundation and Holochain maintaining cross-platform binaries.
NixOS is an entire operating system but Holonix doesn&amp;rsquo;t require a NixOS installation at all.
Holonix targets the standalone &amp;ldquo;nix shell&amp;rdquo; tool.
Nix shell is comparable to using brew, apt-get or npm but is not locked to a single platform or language.</description>
    </item>
    
    <item>
      <title>Predictable</title>
      <link>/docs/predictable/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/predictable/</guid>
      <description>We designed Holonix to avoid common and fundamental &amp;ldquo;works on my machine&amp;rdquo; style frustrations, by focusing on predictability.
It embodies lessons of the full spectrum from low level core development to ad-hoc beginner level hackathon explorations.
Minimal assumptions Software projects typically make many assumptions about what the developer environment looks like.
This happens of the lack of tooling that reliably provides the necessary dependency and configuration management needed at the system level.</description>
    </item>
    
    <item>
      <title>Install holonix</title>
      <link>/docs/install/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/install/</guid>
      <description>Linux/Mac Mac system dependencies Holonix assumes Xcode is installed.
Xcode is the official Mac developer toolkit so is likely to already be installed on a development machine.
Install it from the Apple app store if needed.
You may need to install the command line tools.
Follow the instructions if prompted.
Linux system dependencies Only curl and sudo are needed to install nix-shell.
These are basic commands.
Likely to already be installed on a development machine.</description>
    </item>
    
    <item>
      <title>Configure holonix</title>
      <link>/docs/configure/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/configure/</guid>
      <description>There are a few ways to configure holonix for a project.
 &amp;ldquo;zero config&amp;rdquo; through https://holochain.love urls pinned per-project with a default.nix file embedded directly as a native NixOS overlay  Each approach has pros and cons.
The end goal for all approaches is to create a nix shell that includes a set of dependencies that are useful and predictable for development of zomes, core, GUIs, etc.
It is possible to use the --run syntax to run scripts ad-hoc within a shell but this takes more time as the shell needs to be rebuilt per-command.</description>
    </item>
    
    <item>
      <title>The nix shell</title>
      <link>/docs/nix-shell/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/nix-shell/</guid>
      <description>@todo https://forum.holochain.org/t/im-spinning-up-some-docs-for-holonix-feedback-welcome/451/12?u=thedavidmeister</description>
    </item>
    
    <item>
      <title>NixOS cheatsheet(s)</title>
      <link>/docs/nixos/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/nixos/</guid>
      <description>@todo https://forum.holochain.org/t/im-spinning-up-some-docs-for-holonix-feedback-welcome/451/12?u=thedavidmeister
repl nix is a functional language and has a repl!
this makes it easy to try examples out while learning the synax and operations
https://nixos.wiki/wiki/Nix-repl
run :q to exit the repl!
links to tutorials  official &amp;ldquo;nix pills&amp;rdquo; https://nixos.org/nixos/nix-pills/index.html multipart nix shell tutorial in blog format https://www.sam.today/blog/environments-with-nix-shell-learning-nix-pt-1/ learn x in y minutes nix edition https://learnxinyminutes.com/docs/nix/ official nix expression docs https://nixos.org/nix/manual/#ch-expression-language a &amp;ldquo;gentle introduction&amp;rdquo; community writeup https://ebzzry.io/en/nix/#nix another &amp;ldquo;by example&amp;rdquo; blog series https://medium.</description>
    </item>
    
    <item>
      <title>Bash scripts</title>
      <link>/docs/bash/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/bash/</guid>
      <description>Writing a bash script Most repositories benefit from a set of &amp;ldquo;quality of life&amp;rdquo; scripts.
Bash is by far the lowest common denominator.
It is easy to extend holonix with custom bash scripts.
NixOS provides a function writeShellScriptBin that takes a name, any bash string, creates a binary and puts it on the PATH.
The name is literally what will be executed on the command line by users so must be globally unique.</description>
    </item>
    
    <item>
      <title>Holochain</title>
      <link>/docs/holochain/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/holochain/</guid>
      <description>Holochain rust components There are three main artifacts provided by holochain.
 The rust conductor The holochain development kit (hdk) The command line scaffolding tool (cli)  The conductor and cli are distributed as binaries on github.
The hdk is a rust crate used by zome developers directly to compile holochain compatible wasm.
All of these have shared upstream dependencies on holohain specific rust crates and cli has a dependency on conductor.</description>
    </item>
    
    <item>
      <title>Rust</title>
      <link>/docs/rust/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/rust/</guid>
      <description>@todo https://forum.holochain.org/t/im-spinning-up-some-docs-for-holonix-feedback-welcome/451/12?u=thedavidmeister
An old but mostly still relevant (Holo)chain writeup on managing Rust versioning via. holonix - https://hackmd.io/ShgxFyDVR52gnqK7oQsuiQ</description>
    </item>
    
    <item>
      <title>Node</title>
      <link>/docs/node/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/node/</guid>
      <description>@todo https://forum.holochain.org/t/im-spinning-up-some-docs-for-holonix-feedback-welcome/451/12?u=thedavidmeister
npm binaries There is a conflict with the PATH handling of npm.
When binaries are added to ./node_modules/.bin the default behaviour of npm run is to symlink them somewhere on the PATH outside the current repository.
Other tools that work with npm managed binaries such as npx do something similar.
This is incompatible with holonix for two reasons:
 npm run and npx can attempt to create symlinks in /nix/store/.</description>
    </item>
    
    <item>
      <title>Zome development</title>
      <link>/docs/zome/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/zome/</guid>
      <description>@todo https://forum.holochain.org/t/im-spinning-up-some-docs-for-holonix-feedback-welcome/451/12?u=thedavidmeister</description>
    </item>
    
    <item>
      <title>UI development</title>
      <link>/docs/ui/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/ui/</guid>
      <description>@todo https://forum.holochain.org/t/im-spinning-up-some-docs-for-holonix-feedback-welcome/451/12?u=thedavidmeister</description>
    </item>
    
    <item>
      <title>Documentation kit</title>
      <link>/docs/docs/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/docs/</guid>
      <description>@todo https://forum.holochain.org/t/im-spinning-up-some-docs-for-holonix-feedback-welcome/451/12?u=thedavidmeister</description>
    </item>
    
    <item>
      <title>Continuous integration</title>
      <link>/docs/ci/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/ci/</guid>
      <description>@todo https://forum.holochain.org/t/im-spinning-up-some-docs-for-holonix-feedback-welcome/451/12?u=thedavidmeister</description>
    </item>
    
    <item>
      <title>Release management</title>
      <link>/docs/release/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/release/</guid>
      <description>workflow Holonix defines a simple, language agnostic release workflow.
It assumes a develop and master branch.
It assumes a changelog.
The release.version.current is read from ./config.nix to create a tag v${release.version.current for the release.
The workflow runs in three stages:
 Preflight Version Publish  Each stage runs the hooks (bash scripts) defined in ./config.nix with the same names:
 release.hook.preflight release.hook.version release.hook.publish  graph TB; preflight-hook[preflight hook] -- preflight-pass{error code?</description>
    </item>
    
    <item>
      <title>IDE support</title>
      <link>/docs/ide/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/ide/</guid>
      <description>Overview Every IDE has different functionality, assumptions and audience.
Even ignoring nix we need to deal with interactions between languages, personal preferences and IDE plugin ecosystems.
An example highlighting this for a single language (Rust) can be seen at https://areweideyet.com/
The only difference between nix and not-nix for an IDE is how it discovers the underlying tooling.
We can&amp;rsquo;t provide deep support for every IDE out there but we certainly want to shine a light on what people are doing to target popular setups.</description>
    </item>
    
    <item>
      <title>Makefiles</title>
      <link>/docs/makefiles/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/makefiles/</guid>
      <description>@todo https://forum.holochain.org/t/im-spinning-up-some-docs-for-holonix-feedback-welcome/451/12?u=thedavidmeister</description>
    </item>
    
    <item>
      <title>Support &amp; debug</title>
      <link>/docs/support/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/support/</guid>
      <description>Holochain forum The forum is the best place to seek help for all things holochain.
There is a category dedicated to holonix discussion.
NixOS chat The NixOS community is active and helpful in IRC chat.
Join the #nixos channel on freenode.net IRC servers.
Troubleshooting cruft on the PATH Nix only manages the PATH that they are aware of, e.g. /nix/store.
Nix shell only adds things to the PATH by default.</description>
    </item>
    
    <item>
      <title>Contribute</title>
      <link>/docs/contribute/</link>
      <pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate>
      
      <guid>/docs/contribute/</guid>
      <description>@todo https://forum.holochain.org/t/im-spinning-up-some-docs-for-holonix-feedback-welcome/451/12?u=thedavidmeister
below all pulled verbatim from old readme
Contributing The structure of our nix derivations is designed to be as modular as possible.
The folder structure is something like:
holonix |_app-spec | |_test | | |_default.nix | |_... | |_default.nix |_nixpkgs | |_nixpkgs.nix |_node | |_flush | | |_default.nix | |_default.nix |_... default.nix The default.nix file is used by nix-shell automatically. This consumes holonix/** and provides several new derivations.</description>
    </item>
    
  </channel>
</rss>